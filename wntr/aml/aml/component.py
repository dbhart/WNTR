# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_component')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_component')
    _component = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_component', [dirname(__file__)])
        except ImportError:
            import _component
            return _component
        try:
            _mod = imp.load_module('_component', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _component = swig_import_helper()
    del swig_import_helper
else:
    import _component
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _component.SHARED_PTR_DISOWN

def create_constraint(expr, lb=-1e100, ub=1e100):
    """
    create_constraint(std::shared_ptr< Node > expr, double lb=-1e100, double ub=1e100) -> std::shared_ptr< Constraint >

    Parameters
    ----------
    expr: std::shared_ptr< Node >
    lb: double
    ub: double

    """
    return _component.create_constraint(expr, lb, ub)

def create_conditional_constraint(lb=-1e100, ub=1e100):
    """
    create_conditional_constraint(double lb=-1e100, double ub=1e100) -> std::shared_ptr< ConditionalConstraint >

    Parameters
    ----------
    lb: double
    ub: double

    """
    return _component.create_conditional_constraint(lb, ub)

def create_objective(expr):
    """
    create_objective(std::shared_ptr< Node > expr) -> std::shared_ptr< Objective >

    Parameters
    ----------
    expr: std::shared_ptr< Node >

    """
    return _component.create_objective(expr)
class Component(_object):
    """Proxy of C++ Component class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _component.delete_Component
    __del__ = lambda self: None

    def evaluate(self):
        """
        evaluate(Component self) -> double

        Parameters
        ----------
        self: Component *

        """
        return _component.Component_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(Component self, Var & arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _component.Component_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(Component self, Var & arg2, Var & arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _component.Component_ad2(self, arg2, arg3, arg4)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(Component self, Var & arg2, Var & arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _component.Component_has_ad2(self, arg2, arg3)


    def get_vars(self):
        """
        get_vars(Component self) -> std::shared_ptr< std::set< std::shared_ptr< Var > > >

        Parameters
        ----------
        self: Component *

        """
        return _component.Component_get_vars(self)


    def _print(self):
        """
        _print(Component self) -> std::string

        Parameters
        ----------
        self: Component *

        """
        return _component.Component__print(self)

    __swig_setmethods__["index"] = _component.Component_index_set
    __swig_getmethods__["index"] = _component.Component_index_get
    if _newclass:
        index = _swig_property(_component.Component_index_get, _component.Component_index_set)
    __swig_setmethods__["value"] = _component.Component_value_set
    __swig_getmethods__["value"] = _component.Component_value_get
    if _newclass:
        value = _swig_property(_component.Component_value_get, _component.Component_value_set)
    __swig_setmethods__["name"] = _component.Component_name_set
    __swig_getmethods__["name"] = _component.Component_name_get
    if _newclass:
        name = _swig_property(_component.Component_name_get, _component.Component_name_set)
Component_swigregister = _component.Component_swigregister
Component_swigregister(Component)

class Objective(Component):
    """Proxy of C++ Objective class."""

    __swig_setmethods__ = {}
    for _s in [Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Objective, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Objective self) -> Objective
        __init__(Objective self, std::shared_ptr< Node > e) -> Objective

        Parameters
        ----------
        e: std::shared_ptr< Node >

        """
        this = _component.new_Objective(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["expr"] = _component.Objective_expr_set
    __swig_getmethods__["expr"] = _component.Objective_expr_get
    if _newclass:
        expr = _swig_property(_component.Objective_expr_get, _component.Objective_expr_set)

    def evaluate(self):
        """
        evaluate(Objective self) -> double

        Parameters
        ----------
        self: Objective *

        """
        return _component.Objective_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(Objective self, Var & arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _component.Objective_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(Objective self, Var & arg2, Var & arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _component.Objective_ad2(self, arg2, arg3, arg4)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(Objective self, Var & arg2, Var & arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _component.Objective_has_ad2(self, arg2, arg3)


    def _print(self):
        """
        _print(Objective self) -> std::string

        Parameters
        ----------
        self: Objective *

        """
        return _component.Objective__print(self)


    def get_vars(self):
        """
        get_vars(Objective self) -> std::shared_ptr< std::set< std::shared_ptr< Var > > >

        Parameters
        ----------
        self: Objective *

        """
        return _component.Objective_get_vars(self)

    __swig_destroy__ = _component.delete_Objective
    __del__ = lambda self: None
Objective_swigregister = _component.Objective_swigregister
Objective_swigregister(Objective)

class ConstraintBase(Component):
    """Proxy of C++ ConstraintBase class."""

    __swig_setmethods__ = {}
    for _s in [Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstraintBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstraintBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _component.delete_ConstraintBase
    __del__ = lambda self: None
    __swig_setmethods__["lb"] = _component.ConstraintBase_lb_set
    __swig_getmethods__["lb"] = _component.ConstraintBase_lb_get
    if _newclass:
        lb = _swig_property(_component.ConstraintBase_lb_get, _component.ConstraintBase_lb_set)
    __swig_setmethods__["ub"] = _component.ConstraintBase_ub_set
    __swig_getmethods__["ub"] = _component.ConstraintBase_ub_get
    if _newclass:
        ub = _swig_property(_component.ConstraintBase_ub_get, _component.ConstraintBase_ub_set)
    __swig_setmethods__["dual"] = _component.ConstraintBase_dual_set
    __swig_getmethods__["dual"] = _component.ConstraintBase_dual_get
    if _newclass:
        dual = _swig_property(_component.ConstraintBase_dual_get, _component.ConstraintBase_dual_set)

    def get_dual(self):
        """
        get_dual(ConstraintBase self) -> double

        Parameters
        ----------
        self: ConstraintBase *

        """
        return _component.ConstraintBase_get_dual(self)

ConstraintBase_swigregister = _component.ConstraintBase_swigregister
ConstraintBase_swigregister(ConstraintBase)

class Constraint(ConstraintBase):
    """Proxy of C++ Constraint class."""

    __swig_setmethods__ = {}
    for _s in [ConstraintBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstraintBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Constraint self) -> Constraint
        __init__(Constraint self, std::shared_ptr< Node > e) -> Constraint

        Parameters
        ----------
        e: std::shared_ptr< Node >

        """
        this = _component.new_Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["expr"] = _component.Constraint_expr_set
    __swig_getmethods__["expr"] = _component.Constraint_expr_get
    if _newclass:
        expr = _swig_property(_component.Constraint_expr_get, _component.Constraint_expr_set)

    def get_dual(self):
        """
        get_dual(Constraint self) -> double

        Parameters
        ----------
        self: Constraint *

        """
        return _component.Constraint_get_dual(self)


    def evaluate(self):
        """
        evaluate(Constraint self) -> double

        Parameters
        ----------
        self: Constraint *

        """
        return _component.Constraint_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(Constraint self, Var & arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _component.Constraint_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(Constraint self, Var & arg2, Var & arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _component.Constraint_ad2(self, arg2, arg3, arg4)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(Constraint self, Var & arg2, Var & arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _component.Constraint_has_ad2(self, arg2, arg3)


    def _print(self):
        """
        _print(Constraint self) -> std::string

        Parameters
        ----------
        self: Constraint *

        """
        return _component.Constraint__print(self)


    def get_vars(self):
        """
        get_vars(Constraint self) -> std::shared_ptr< std::set< std::shared_ptr< Var > > >

        Parameters
        ----------
        self: Constraint *

        """
        return _component.Constraint_get_vars(self)

    __swig_destroy__ = _component.delete_Constraint
    __del__ = lambda self: None
Constraint_swigregister = _component.Constraint_swigregister
Constraint_swigregister(Constraint)

class ConditionalConstraint(ConstraintBase):
    """Proxy of C++ ConditionalConstraint class."""

    __swig_setmethods__ = {}
    for _s in [ConstraintBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConditionalConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstraintBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConditionalConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ConditionalConstraint self) -> ConditionalConstraint"""
        this = _component.new_ConditionalConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["condition_exprs"] = _component.ConditionalConstraint_condition_exprs_set
    __swig_getmethods__["condition_exprs"] = _component.ConditionalConstraint_condition_exprs_get
    if _newclass:
        condition_exprs = _swig_property(_component.ConditionalConstraint_condition_exprs_get, _component.ConditionalConstraint_condition_exprs_set)
    __swig_setmethods__["exprs"] = _component.ConditionalConstraint_exprs_set
    __swig_getmethods__["exprs"] = _component.ConditionalConstraint_exprs_get
    if _newclass:
        exprs = _swig_property(_component.ConditionalConstraint_exprs_get, _component.ConditionalConstraint_exprs_set)

    def evaluate(self):
        """
        evaluate(ConditionalConstraint self) -> double

        Parameters
        ----------
        self: ConditionalConstraint *

        """
        return _component.ConditionalConstraint_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ConditionalConstraint self, Var & arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _component.ConditionalConstraint_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ConditionalConstraint self, Var & arg2, Var & arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _component.ConditionalConstraint_ad2(self, arg2, arg3, arg4)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ConditionalConstraint self, Var & arg2, Var & arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _component.ConditionalConstraint_has_ad2(self, arg2, arg3)


    def add_condition(self, arg2, arg3):
        """
        add_condition(ConditionalConstraint self, std::shared_ptr< Node > arg2, std::shared_ptr< Node > arg3)

        Parameters
        ----------
        arg2: std::shared_ptr< Node >
        arg3: std::shared_ptr< Node >

        """
        return _component.ConditionalConstraint_add_condition(self, arg2, arg3)


    def add_final_expr(self, arg2):
        """
        add_final_expr(ConditionalConstraint self, std::shared_ptr< Node > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< Node >

        """
        return _component.ConditionalConstraint_add_final_expr(self, arg2)


    def get_dual(self):
        """
        get_dual(ConditionalConstraint self) -> double

        Parameters
        ----------
        self: ConditionalConstraint *

        """
        return _component.ConditionalConstraint_get_dual(self)


    def _print(self):
        """
        _print(ConditionalConstraint self) -> std::string

        Parameters
        ----------
        self: ConditionalConstraint *

        """
        return _component.ConditionalConstraint__print(self)


    def get_vars(self):
        """
        get_vars(ConditionalConstraint self) -> std::shared_ptr< std::set< std::shared_ptr< Var > > >

        Parameters
        ----------
        self: ConditionalConstraint *

        """
        return _component.ConditionalConstraint_get_vars(self)

    __swig_destroy__ = _component.delete_ConditionalConstraint
    __del__ = lambda self: None
ConditionalConstraint_swigregister = _component.ConditionalConstraint_swigregister
ConditionalConstraint_swigregister(ConditionalConstraint)

# This file is compatible with both classic and new-style classes.


