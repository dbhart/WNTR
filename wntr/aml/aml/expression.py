# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_expression')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_expression')
    _expression = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_expression', [dirname(__file__)])
        except ImportError:
            import _expression
            return _expression
        try:
            _mod = imp.load_module('_expression', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _expression = swig_import_helper()
    del swig_import_helper
else:
    import _expression
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _expression.SHARED_PTR_DISOWN

def create_var(value=0.0, lb=-1.0e100, ub=1.0e100):
    """
    create_var(double value=0.0, double lb=-1.0e100, double ub=1.0e100) -> std::shared_ptr< Var >

    Parameters
    ----------
    value: double
    lb: double
    ub: double

    """
    return _expression.create_var(value, lb, ub)

def create_param(value=0.0):
    """
    create_param(double value=0.0) -> std::shared_ptr< Param >

    Parameters
    ----------
    value: double

    """
    return _expression.create_param(value)
class Node(_object):
    """Proxy of C++ Node class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _expression.delete_Node
    __del__ = lambda self: None
    __swig_setmethods__["value"] = _expression.Node_value_set
    __swig_getmethods__["value"] = _expression.Node_value_get
    if _newclass:
        value = _swig_property(_expression.Node_value_get, _expression.Node_value_set)
    __swig_setmethods__["der_n1"] = _expression.Node_der_n1_set
    __swig_getmethods__["der_n1"] = _expression.Node_der_n1_get
    if _newclass:
        der_n1 = _swig_property(_expression.Node_der_n1_get, _expression.Node_der_n1_set)
    __swig_setmethods__["der_n2"] = _expression.Node_der_n2_set
    __swig_getmethods__["der_n2"] = _expression.Node_der_n2_get
    if _newclass:
        der_n2 = _swig_property(_expression.Node_der_n2_get, _expression.Node_der_n2_set)
    __swig_setmethods__["der2"] = _expression.Node_der2_set
    __swig_getmethods__["der2"] = _expression.Node_der2_get
    if _newclass:
        der2 = _swig_property(_expression.Node_der2_get, _expression.Node_der2_set)
    __swig_setmethods__["has_der_n1"] = _expression.Node_has_der_n1_set
    __swig_getmethods__["has_der_n1"] = _expression.Node_has_der_n1_get
    if _newclass:
        has_der_n1 = _swig_property(_expression.Node_has_der_n1_get, _expression.Node_has_der_n1_set)
    __swig_setmethods__["has_der_n2"] = _expression.Node_has_der_n2_set
    __swig_getmethods__["has_der_n2"] = _expression.Node_has_der_n2_get
    if _newclass:
        has_der_n2 = _swig_property(_expression.Node_has_der_n2_get, _expression.Node_has_der_n2_set)
    __swig_setmethods__["has_der2"] = _expression.Node_has_der2_set
    __swig_getmethods__["has_der2"] = _expression.Node_has_der2_get
    if _newclass:
        has_der2 = _swig_property(_expression.Node_has_der2_get, _expression.Node_has_der2_set)
    __swig_setmethods__["index"] = _expression.Node_index_set
    __swig_getmethods__["index"] = _expression.Node_index_get
    if _newclass:
        index = _swig_property(_expression.Node_index_get, _expression.Node_index_set)

    def get_nodes(self):
        """
        get_nodes(Node self) -> std::shared_ptr< std::vector< std::shared_ptr< Node > > >

        Parameters
        ----------
        self: Node *

        """
        return _expression.Node_get_nodes(self)


    def get_coefs(self):
        """
        get_coefs(Node self) -> std::shared_ptr< std::vector< double > >

        Parameters
        ----------
        self: Node *

        """
        return _expression.Node_get_coefs(self)


    def get_sparsity(self):
        """
        get_sparsity(Node self) -> std::shared_ptr< std::map< std::shared_ptr< Node >,std::vector< int > > >

        Parameters
        ----------
        self: Node *

        """
        return _expression.Node_get_sparsity(self)


    def get_vars(self):
        """
        get_vars(Node self) -> std::shared_ptr< std::set< std::shared_ptr< Var > > >

        Parameters
        ----------
        self: Node *

        """
        return _expression.Node_get_vars(self)


    def evaluate(self):
        """
        evaluate(Node self) -> double

        Parameters
        ----------
        self: Node *

        """
        return _expression.Node_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(Node self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.Node_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(Node self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.Node_ad2(self, arg2, arg3, arg4)


    def has_ad(self, arg2):
        """
        has_ad(Node self, Var arg2) -> bool

        Parameters
        ----------
        arg2: Var &

        """
        return _expression.Node_has_ad(self, arg2)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(Node self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.Node_has_ad2(self, arg2, arg3)


    def set_name(self, arg2):
        """
        set_name(Node self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.Node_set_name(self, arg2)


    def get_type(self):
        """
        get_type(Node self) -> std::string

        Parameters
        ----------
        self: Node *

        """
        return _expression.Node_get_type(self)


    def set_coefs(self, arg2):
        """
        set_coefs(Node self, std::shared_ptr< std::vector< double > > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< std::vector< double > >

        """
        return _expression.Node_set_coefs(self, arg2)


    def __neg__(self):
        """
        __neg__(Node self) -> std::shared_ptr< Node >

        Parameters
        ----------
        self: Node *

        """
        return _expression.Node___neg__(self)


    def __add__(self, *args):
        """
        __add__(Node self, Node arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: Node &

        __add__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___add__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(Node self, Node arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: Node &

        __sub__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___sub__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(Node self, Node arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: Node &

        __mul__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___mul__(self, *args)


    def __truediv__(self, *args):
        return _expression.Node___truediv__(self, *args)
    __div__ = __truediv__



    def __pow__(self, *args):
        """
        __pow__(Node self, Node arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: Node &

        __pow__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___pow__(self, *args)


    def __radd__(self, arg2):
        """
        __radd__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___radd__(self, arg2)


    def __rsub__(self, arg2):
        """
        __rsub__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___rsub__(self, arg2)


    def __rmul__(self, arg2):
        """
        __rmul__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___rmul__(self, arg2)


    def __rdiv__(self, arg2):
        """
        __rdiv__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___rdiv__(self, arg2)


    def __rtruediv__(self, arg2):
        """
        __rtruediv__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___rtruediv__(self, arg2)


    def __rpow__(self, arg2):
        """
        __rpow__(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node___rpow__(self, arg2)


    def add_const(self, arg2):
        """
        add_const(Node self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node_add_const(self, arg2)


    def multiply_const(self, arg2):
        """
        multiply_const(Node self, double arg2)

        Parameters
        ----------
        arg2: double

        """
        return _expression.Node_multiply_const(self, arg2)


    def _print(self):
        """
        _print(Node self) -> std::string

        Parameters
        ----------
        self: Node *

        """
        return _expression.Node__print(self)

Node_swigregister = _expression.Node_swigregister
Node_swigregister(Node)

class Summation(Node):
    """Proxy of C++ Summation class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Summation, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Summation, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Summation self) -> Summation"""
        this = _expression.new_Summation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_nodes(self):
        """
        get_nodes(Summation self) -> std::shared_ptr< std::vector< std::shared_ptr< Node > > >

        Parameters
        ----------
        self: Summation *

        """
        return _expression.Summation_get_nodes(self)


    def get_coefs(self):
        """
        get_coefs(Summation self) -> std::shared_ptr< std::vector< double > >

        Parameters
        ----------
        self: Summation *

        """
        return _expression.Summation_get_coefs(self)


    def get_sparsity(self):
        """
        get_sparsity(Summation self) -> std::shared_ptr< std::map< std::shared_ptr< Node >,std::vector< int > > >

        Parameters
        ----------
        self: Summation *

        """
        return _expression.Summation_get_sparsity(self)


    def get_vars(self):
        """
        get_vars(Summation self) -> std::shared_ptr< std::set< std::shared_ptr< Var > > >

        Parameters
        ----------
        self: Summation *

        """
        return _expression.Summation_get_vars(self)


    def evaluate(self):
        """
        evaluate(Summation self) -> double

        Parameters
        ----------
        self: Summation *

        """
        return _expression.Summation_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(Summation self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.Summation_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(Summation self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.Summation_ad2(self, arg2, arg3, arg4)


    def has_ad(self, arg2):
        """
        has_ad(Summation self, Var arg2) -> bool

        Parameters
        ----------
        arg2: Var &

        """
        return _expression.Summation_has_ad(self, arg2)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(Summation self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.Summation_has_ad2(self, arg2, arg3)


    def set_name(self, arg2):
        """
        set_name(Summation self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.Summation_set_name(self, arg2)


    def get_type(self):
        """
        get_type(Summation self) -> std::string

        Parameters
        ----------
        self: Summation *

        """
        return _expression.Summation_get_type(self)


    def set_coefs(self, arg2):
        """
        set_coefs(Summation self, std::shared_ptr< std::vector< double > > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< std::vector< double > >

        """
        return _expression.Summation_set_coefs(self, arg2)

    __swig_setmethods__["nodes"] = _expression.Summation_nodes_set
    __swig_getmethods__["nodes"] = _expression.Summation_nodes_get
    if _newclass:
        nodes = _swig_property(_expression.Summation_nodes_get, _expression.Summation_nodes_set)
    __swig_setmethods__["coefs"] = _expression.Summation_coefs_set
    __swig_getmethods__["coefs"] = _expression.Summation_coefs_get
    if _newclass:
        coefs = _swig_property(_expression.Summation_coefs_get, _expression.Summation_coefs_set)
    __swig_setmethods__["sparsity"] = _expression.Summation_sparsity_set
    __swig_getmethods__["sparsity"] = _expression.Summation_sparsity_get
    if _newclass:
        sparsity = _swig_property(_expression.Summation_sparsity_get, _expression.Summation_sparsity_set)
    __swig_setmethods__["vars"] = _expression.Summation_vars_set
    __swig_getmethods__["vars"] = _expression.Summation_vars_get
    if _newclass:
        vars = _swig_property(_expression.Summation_vars_get, _expression.Summation_vars_set)
    __swig_setmethods__["constant"] = _expression.Summation_constant_set
    __swig_getmethods__["constant"] = _expression.Summation_constant_get
    if _newclass:
        constant = _swig_property(_expression.Summation_constant_get, _expression.Summation_constant_set)

    def add_const(self, arg2):
        """
        add_const(Summation self, double arg2) -> std::shared_ptr< Node >

        Parameters
        ----------
        arg2: double

        """
        return _expression.Summation_add_const(self, arg2)


    def multiply_const(self, arg2):
        """
        multiply_const(Summation self, double arg2)

        Parameters
        ----------
        arg2: double

        """
        return _expression.Summation_multiply_const(self, arg2)

    __swig_destroy__ = _expression.delete_Summation
    __del__ = lambda self: None
Summation_swigregister = _expression.Summation_swigregister
Summation_swigregister(Summation)

class Var(Node):
    """Proxy of C++ Var class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Var, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Var, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Var self) -> Var"""
        this = _expression.new_Var()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["lb"] = _expression.Var_lb_set
    __swig_getmethods__["lb"] = _expression.Var_lb_get
    if _newclass:
        lb = _swig_property(_expression.Var_lb_get, _expression.Var_lb_set)
    __swig_setmethods__["ub"] = _expression.Var_ub_set
    __swig_getmethods__["ub"] = _expression.Var_ub_get
    if _newclass:
        ub = _swig_property(_expression.Var_ub_get, _expression.Var_ub_set)
    __swig_setmethods__["lb_dual"] = _expression.Var_lb_dual_set
    __swig_getmethods__["lb_dual"] = _expression.Var_lb_dual_get
    if _newclass:
        lb_dual = _swig_property(_expression.Var_lb_dual_get, _expression.Var_lb_dual_set)
    __swig_setmethods__["ub_dual"] = _expression.Var_ub_dual_set
    __swig_getmethods__["ub_dual"] = _expression.Var_ub_dual_get
    if _newclass:
        ub_dual = _swig_property(_expression.Var_ub_dual_get, _expression.Var_ub_dual_set)

    def get_vars(self):
        """
        get_vars(Var self) -> std::shared_ptr< std::set< std::shared_ptr< Var > > >

        Parameters
        ----------
        self: Var *

        """
        return _expression.Var_get_vars(self)


    def evaluate(self):
        """
        evaluate(Var self) -> double

        Parameters
        ----------
        self: Var *

        """
        return _expression.Var_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(Var self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.Var_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(Var self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.Var_ad2(self, arg2, arg3, arg4)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(Var self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.Var_has_ad2(self, arg2, arg3)


    def set_name(self, arg2):
        """
        set_name(Var self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.Var_set_name(self, arg2)


    def get_type(self):
        """
        get_type(Var self) -> std::string

        Parameters
        ----------
        self: Var *

        """
        return _expression.Var_get_type(self)

    __swig_setmethods__["name"] = _expression.Var_name_set
    __swig_getmethods__["name"] = _expression.Var_name_get
    if _newclass:
        name = _swig_property(_expression.Var_name_get, _expression.Var_name_set)
    __swig_destroy__ = _expression.delete_Var
    __del__ = lambda self: None
Var_swigregister = _expression.Var_swigregister
Var_swigregister(Var)

class Param(Node):
    """Proxy of C++ Param class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Param, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Param self) -> Param"""
        this = _expression.new_Param()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(Param self) -> double

        Parameters
        ----------
        self: Param *

        """
        return _expression.Param_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(Param self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.Param_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(Param self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.Param_ad2(self, arg2, arg3, arg4)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(Param self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.Param_has_ad2(self, arg2, arg3)


    def set_name(self, arg2):
        """
        set_name(Param self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.Param_set_name(self, arg2)


    def get_type(self):
        """
        get_type(Param self) -> std::string

        Parameters
        ----------
        self: Param *

        """
        return _expression.Param_get_type(self)

    __swig_setmethods__["name"] = _expression.Param_name_set
    __swig_getmethods__["name"] = _expression.Param_name_get
    if _newclass:
        name = _swig_property(_expression.Param_name_get, _expression.Param_name_set)
    __swig_destroy__ = _expression.delete_Param
    __del__ = lambda self: None
Param_swigregister = _expression.Param_swigregister
Param_swigregister(Param)

class Expression(Node):
    """Proxy of C++ Expression class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expression, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expression, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Expression self) -> Expression"""
        this = _expression.new_Expression()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_nodes(self):
        """
        get_nodes(Expression self) -> std::shared_ptr< std::vector< std::shared_ptr< Node > > >

        Parameters
        ----------
        self: Expression *

        """
        return _expression.Expression_get_nodes(self)


    def get_vars(self):
        """
        get_vars(Expression self) -> std::shared_ptr< std::set< std::shared_ptr< Var > > >

        Parameters
        ----------
        self: Expression *

        """
        return _expression.Expression_get_vars(self)


    def evaluate(self):
        """
        evaluate(Expression self) -> double

        Parameters
        ----------
        self: Expression *

        """
        return _expression.Expression_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(Expression self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.Expression_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(Expression self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.Expression_ad2(self, arg2, arg3, arg4)


    def has_ad(self, arg2):
        """
        has_ad(Expression self, Var arg2) -> bool

        Parameters
        ----------
        arg2: Var &

        """
        return _expression.Expression_has_ad(self, arg2)


    def has_ad2(self, arg2, arg3):
        """
        has_ad2(Expression self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.Expression_has_ad2(self, arg2, arg3)


    def set_name(self, arg2):
        """
        set_name(Expression self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.Expression_set_name(self, arg2)


    def get_type(self):
        """
        get_type(Expression self) -> std::string

        Parameters
        ----------
        self: Expression *

        """
        return _expression.Expression_get_type(self)

    __swig_setmethods__["nodes"] = _expression.Expression_nodes_set
    __swig_getmethods__["nodes"] = _expression.Expression_nodes_get
    if _newclass:
        nodes = _swig_property(_expression.Expression_nodes_get, _expression.Expression_nodes_set)
    __swig_setmethods__["vars"] = _expression.Expression_vars_set
    __swig_getmethods__["vars"] = _expression.Expression_vars_get
    if _newclass:
        vars = _swig_property(_expression.Expression_vars_get, _expression.Expression_vars_set)
    __swig_destroy__ = _expression.delete_Expression
    __del__ = lambda self: None
Expression_swigregister = _expression.Expression_swigregister
Expression_swigregister(Expression)

class VarVarMultiplyOperator(Node):
    """Proxy of C++ VarVarMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarVarMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarVarMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarVarMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarVarMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarVarMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarVarMultiplyOperator self) -> double

        Parameters
        ----------
        self: VarVarMultiplyOperator *

        """
        return _expression.VarVarMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarVarMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarVarMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarVarMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarVarMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarVarMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarVarMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarVarMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarVarMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarVarMultiplyOperator_node1_get, _expression.VarVarMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarVarMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarVarMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarVarMultiplyOperator_node2_get, _expression.VarVarMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarVarMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarVarMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarVarMultiplyOperator
    __del__ = lambda self: None
VarVarMultiplyOperator_swigregister = _expression.VarVarMultiplyOperator_swigregister
VarVarMultiplyOperator_swigregister(VarVarMultiplyOperator)

class VarParamMultiplyOperator(Node):
    """Proxy of C++ VarParamMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarParamMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarParamMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarParamMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarParamMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarParamMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarParamMultiplyOperator self) -> double

        Parameters
        ----------
        self: VarParamMultiplyOperator *

        """
        return _expression.VarParamMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarParamMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarParamMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarParamMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarParamMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarParamMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarParamMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarParamMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarParamMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarParamMultiplyOperator_node1_get, _expression.VarParamMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarParamMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarParamMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarParamMultiplyOperator_node2_get, _expression.VarParamMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarParamMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarParamMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarParamMultiplyOperator
    __del__ = lambda self: None
VarParamMultiplyOperator_swigregister = _expression.VarParamMultiplyOperator_swigregister
VarParamMultiplyOperator_swigregister(VarParamMultiplyOperator)

class VarOperatorMultiplyOperator(Node):
    """Proxy of C++ VarOperatorMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarOperatorMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarOperatorMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarOperatorMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarOperatorMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarOperatorMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarOperatorMultiplyOperator self) -> double

        Parameters
        ----------
        self: VarOperatorMultiplyOperator *

        """
        return _expression.VarOperatorMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarOperatorMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarOperatorMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarOperatorMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarOperatorMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarOperatorMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarOperatorMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarOperatorMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarOperatorMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarOperatorMultiplyOperator_node1_get, _expression.VarOperatorMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarOperatorMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarOperatorMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarOperatorMultiplyOperator_node2_get, _expression.VarOperatorMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarOperatorMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarOperatorMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarOperatorMultiplyOperator
    __del__ = lambda self: None
VarOperatorMultiplyOperator_swigregister = _expression.VarOperatorMultiplyOperator_swigregister
VarOperatorMultiplyOperator_swigregister(VarOperatorMultiplyOperator)

class ParamVarMultiplyOperator(Node):
    """Proxy of C++ ParamVarMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamVarMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamVarMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamVarMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamVarMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamVarMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamVarMultiplyOperator self) -> double

        Parameters
        ----------
        self: ParamVarMultiplyOperator *

        """
        return _expression.ParamVarMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamVarMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamVarMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamVarMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamVarMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamVarMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamVarMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamVarMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamVarMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamVarMultiplyOperator_node1_get, _expression.ParamVarMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamVarMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamVarMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamVarMultiplyOperator_node2_get, _expression.ParamVarMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamVarMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamVarMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamVarMultiplyOperator
    __del__ = lambda self: None
ParamVarMultiplyOperator_swigregister = _expression.ParamVarMultiplyOperator_swigregister
ParamVarMultiplyOperator_swigregister(ParamVarMultiplyOperator)

class ParamParamMultiplyOperator(Node):
    """Proxy of C++ ParamParamMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamParamMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamParamMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamParamMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamParamMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamParamMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamParamMultiplyOperator self) -> double

        Parameters
        ----------
        self: ParamParamMultiplyOperator *

        """
        return _expression.ParamParamMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamParamMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamParamMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamParamMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamParamMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamParamMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamParamMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamParamMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamParamMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamParamMultiplyOperator_node1_get, _expression.ParamParamMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamParamMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamParamMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamParamMultiplyOperator_node2_get, _expression.ParamParamMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamParamMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamParamMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamParamMultiplyOperator
    __del__ = lambda self: None
ParamParamMultiplyOperator_swigregister = _expression.ParamParamMultiplyOperator_swigregister
ParamParamMultiplyOperator_swigregister(ParamParamMultiplyOperator)

class ParamOperatorMultiplyOperator(Node):
    """Proxy of C++ ParamOperatorMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamOperatorMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamOperatorMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamOperatorMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamOperatorMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamOperatorMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamOperatorMultiplyOperator self) -> double

        Parameters
        ----------
        self: ParamOperatorMultiplyOperator *

        """
        return _expression.ParamOperatorMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamOperatorMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamOperatorMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamOperatorMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamOperatorMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamOperatorMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamOperatorMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamOperatorMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamOperatorMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamOperatorMultiplyOperator_node1_get, _expression.ParamOperatorMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamOperatorMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamOperatorMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamOperatorMultiplyOperator_node2_get, _expression.ParamOperatorMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamOperatorMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamOperatorMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamOperatorMultiplyOperator
    __del__ = lambda self: None
ParamOperatorMultiplyOperator_swigregister = _expression.ParamOperatorMultiplyOperator_swigregister
ParamOperatorMultiplyOperator_swigregister(ParamOperatorMultiplyOperator)

class OperatorVarMultiplyOperator(Node):
    """Proxy of C++ OperatorVarMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorVarMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorVarMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorVarMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorVarMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorVarMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorVarMultiplyOperator self) -> double

        Parameters
        ----------
        self: OperatorVarMultiplyOperator *

        """
        return _expression.OperatorVarMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorVarMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorVarMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorVarMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorVarMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorVarMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorVarMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorVarMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorVarMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorVarMultiplyOperator_node1_get, _expression.OperatorVarMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorVarMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorVarMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorVarMultiplyOperator_node2_get, _expression.OperatorVarMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorVarMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorVarMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorVarMultiplyOperator
    __del__ = lambda self: None
OperatorVarMultiplyOperator_swigregister = _expression.OperatorVarMultiplyOperator_swigregister
OperatorVarMultiplyOperator_swigregister(OperatorVarMultiplyOperator)

class OperatorParamMultiplyOperator(Node):
    """Proxy of C++ OperatorParamMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorParamMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorParamMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorParamMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorParamMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorParamMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorParamMultiplyOperator self) -> double

        Parameters
        ----------
        self: OperatorParamMultiplyOperator *

        """
        return _expression.OperatorParamMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorParamMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorParamMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorParamMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorParamMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorParamMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorParamMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorParamMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorParamMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorParamMultiplyOperator_node1_get, _expression.OperatorParamMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorParamMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorParamMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorParamMultiplyOperator_node2_get, _expression.OperatorParamMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorParamMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorParamMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorParamMultiplyOperator
    __del__ = lambda self: None
OperatorParamMultiplyOperator_swigregister = _expression.OperatorParamMultiplyOperator_swigregister
OperatorParamMultiplyOperator_swigregister(OperatorParamMultiplyOperator)

class OperatorOperatorMultiplyOperator(Node):
    """Proxy of C++ OperatorOperatorMultiplyOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorOperatorMultiplyOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorOperatorMultiplyOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorOperatorMultiplyOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorOperatorMultiplyOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorOperatorMultiplyOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorOperatorMultiplyOperator self) -> double

        Parameters
        ----------
        self: OperatorOperatorMultiplyOperator *

        """
        return _expression.OperatorOperatorMultiplyOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorOperatorMultiplyOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorOperatorMultiplyOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorOperatorMultiplyOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorOperatorMultiplyOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorOperatorMultiplyOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorOperatorMultiplyOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorOperatorMultiplyOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorOperatorMultiplyOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorOperatorMultiplyOperator_node1_get, _expression.OperatorOperatorMultiplyOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorOperatorMultiplyOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorOperatorMultiplyOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorOperatorMultiplyOperator_node2_get, _expression.OperatorOperatorMultiplyOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorOperatorMultiplyOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorOperatorMultiplyOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorOperatorMultiplyOperator
    __del__ = lambda self: None
OperatorOperatorMultiplyOperator_swigregister = _expression.OperatorOperatorMultiplyOperator_swigregister
OperatorOperatorMultiplyOperator_swigregister(OperatorOperatorMultiplyOperator)

class VarVarDivideOperator(Node):
    """Proxy of C++ VarVarDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarVarDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarVarDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarVarDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarVarDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarVarDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarVarDivideOperator self) -> double

        Parameters
        ----------
        self: VarVarDivideOperator *

        """
        return _expression.VarVarDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarVarDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarVarDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarVarDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarVarDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarVarDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarVarDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarVarDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarVarDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarVarDivideOperator_node1_get, _expression.VarVarDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarVarDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarVarDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarVarDivideOperator_node2_get, _expression.VarVarDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarVarDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarVarDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarVarDivideOperator
    __del__ = lambda self: None
VarVarDivideOperator_swigregister = _expression.VarVarDivideOperator_swigregister
VarVarDivideOperator_swigregister(VarVarDivideOperator)

class VarParamDivideOperator(Node):
    """Proxy of C++ VarParamDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarParamDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarParamDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarParamDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarParamDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarParamDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarParamDivideOperator self) -> double

        Parameters
        ----------
        self: VarParamDivideOperator *

        """
        return _expression.VarParamDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarParamDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarParamDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarParamDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarParamDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarParamDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarParamDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarParamDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarParamDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarParamDivideOperator_node1_get, _expression.VarParamDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarParamDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarParamDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarParamDivideOperator_node2_get, _expression.VarParamDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarParamDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarParamDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarParamDivideOperator
    __del__ = lambda self: None
VarParamDivideOperator_swigregister = _expression.VarParamDivideOperator_swigregister
VarParamDivideOperator_swigregister(VarParamDivideOperator)

class VarOperatorDivideOperator(Node):
    """Proxy of C++ VarOperatorDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarOperatorDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarOperatorDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarOperatorDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarOperatorDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarOperatorDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarOperatorDivideOperator self) -> double

        Parameters
        ----------
        self: VarOperatorDivideOperator *

        """
        return _expression.VarOperatorDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarOperatorDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarOperatorDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarOperatorDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarOperatorDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarOperatorDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarOperatorDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarOperatorDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarOperatorDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarOperatorDivideOperator_node1_get, _expression.VarOperatorDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarOperatorDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarOperatorDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarOperatorDivideOperator_node2_get, _expression.VarOperatorDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarOperatorDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarOperatorDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarOperatorDivideOperator
    __del__ = lambda self: None
VarOperatorDivideOperator_swigregister = _expression.VarOperatorDivideOperator_swigregister
VarOperatorDivideOperator_swigregister(VarOperatorDivideOperator)

class ParamVarDivideOperator(Node):
    """Proxy of C++ ParamVarDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamVarDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamVarDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamVarDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamVarDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamVarDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamVarDivideOperator self) -> double

        Parameters
        ----------
        self: ParamVarDivideOperator *

        """
        return _expression.ParamVarDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamVarDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamVarDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamVarDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamVarDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamVarDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamVarDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamVarDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamVarDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamVarDivideOperator_node1_get, _expression.ParamVarDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamVarDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamVarDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamVarDivideOperator_node2_get, _expression.ParamVarDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamVarDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamVarDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamVarDivideOperator
    __del__ = lambda self: None
ParamVarDivideOperator_swigregister = _expression.ParamVarDivideOperator_swigregister
ParamVarDivideOperator_swigregister(ParamVarDivideOperator)

class ParamParamDivideOperator(Node):
    """Proxy of C++ ParamParamDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamParamDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamParamDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamParamDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamParamDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamParamDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamParamDivideOperator self) -> double

        Parameters
        ----------
        self: ParamParamDivideOperator *

        """
        return _expression.ParamParamDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamParamDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamParamDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamParamDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamParamDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamParamDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamParamDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamParamDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamParamDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamParamDivideOperator_node1_get, _expression.ParamParamDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamParamDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamParamDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamParamDivideOperator_node2_get, _expression.ParamParamDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamParamDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamParamDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamParamDivideOperator
    __del__ = lambda self: None
ParamParamDivideOperator_swigregister = _expression.ParamParamDivideOperator_swigregister
ParamParamDivideOperator_swigregister(ParamParamDivideOperator)

class ParamOperatorDivideOperator(Node):
    """Proxy of C++ ParamOperatorDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamOperatorDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamOperatorDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamOperatorDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamOperatorDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamOperatorDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamOperatorDivideOperator self) -> double

        Parameters
        ----------
        self: ParamOperatorDivideOperator *

        """
        return _expression.ParamOperatorDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamOperatorDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamOperatorDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamOperatorDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamOperatorDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamOperatorDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamOperatorDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamOperatorDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamOperatorDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamOperatorDivideOperator_node1_get, _expression.ParamOperatorDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamOperatorDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamOperatorDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamOperatorDivideOperator_node2_get, _expression.ParamOperatorDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamOperatorDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamOperatorDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamOperatorDivideOperator
    __del__ = lambda self: None
ParamOperatorDivideOperator_swigregister = _expression.ParamOperatorDivideOperator_swigregister
ParamOperatorDivideOperator_swigregister(ParamOperatorDivideOperator)

class OperatorVarDivideOperator(Node):
    """Proxy of C++ OperatorVarDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorVarDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorVarDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorVarDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorVarDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorVarDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorVarDivideOperator self) -> double

        Parameters
        ----------
        self: OperatorVarDivideOperator *

        """
        return _expression.OperatorVarDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorVarDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorVarDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorVarDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorVarDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorVarDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorVarDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorVarDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorVarDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorVarDivideOperator_node1_get, _expression.OperatorVarDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorVarDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorVarDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorVarDivideOperator_node2_get, _expression.OperatorVarDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorVarDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorVarDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorVarDivideOperator
    __del__ = lambda self: None
OperatorVarDivideOperator_swigregister = _expression.OperatorVarDivideOperator_swigregister
OperatorVarDivideOperator_swigregister(OperatorVarDivideOperator)

class OperatorParamDivideOperator(Node):
    """Proxy of C++ OperatorParamDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorParamDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorParamDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorParamDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorParamDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorParamDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorParamDivideOperator self) -> double

        Parameters
        ----------
        self: OperatorParamDivideOperator *

        """
        return _expression.OperatorParamDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorParamDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorParamDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorParamDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorParamDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorParamDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorParamDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorParamDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorParamDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorParamDivideOperator_node1_get, _expression.OperatorParamDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorParamDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorParamDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorParamDivideOperator_node2_get, _expression.OperatorParamDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorParamDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorParamDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorParamDivideOperator
    __del__ = lambda self: None
OperatorParamDivideOperator_swigregister = _expression.OperatorParamDivideOperator_swigregister
OperatorParamDivideOperator_swigregister(OperatorParamDivideOperator)

class OperatorOperatorDivideOperator(Node):
    """Proxy of C++ OperatorOperatorDivideOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorOperatorDivideOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorOperatorDivideOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorOperatorDivideOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorOperatorDivideOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorOperatorDivideOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorOperatorDivideOperator self) -> double

        Parameters
        ----------
        self: OperatorOperatorDivideOperator *

        """
        return _expression.OperatorOperatorDivideOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorOperatorDivideOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorOperatorDivideOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorOperatorDivideOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorOperatorDivideOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorOperatorDivideOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorOperatorDivideOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorOperatorDivideOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorOperatorDivideOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorOperatorDivideOperator_node1_get, _expression.OperatorOperatorDivideOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorOperatorDivideOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorOperatorDivideOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorOperatorDivideOperator_node2_get, _expression.OperatorOperatorDivideOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorOperatorDivideOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorOperatorDivideOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorOperatorDivideOperator
    __del__ = lambda self: None
OperatorOperatorDivideOperator_swigregister = _expression.OperatorOperatorDivideOperator_swigregister
OperatorOperatorDivideOperator_swigregister(OperatorOperatorDivideOperator)

class VarVarPowerOperator(Node):
    """Proxy of C++ VarVarPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarVarPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarVarPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarVarPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarVarPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarVarPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarVarPowerOperator self) -> double

        Parameters
        ----------
        self: VarVarPowerOperator *

        """
        return _expression.VarVarPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarVarPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarVarPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarVarPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarVarPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarVarPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarVarPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarVarPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarVarPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarVarPowerOperator_node1_get, _expression.VarVarPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarVarPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarVarPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarVarPowerOperator_node2_get, _expression.VarVarPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarVarPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarVarPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarVarPowerOperator
    __del__ = lambda self: None
VarVarPowerOperator_swigregister = _expression.VarVarPowerOperator_swigregister
VarVarPowerOperator_swigregister(VarVarPowerOperator)

class VarParamPowerOperator(Node):
    """Proxy of C++ VarParamPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarParamPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarParamPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarParamPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarParamPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarParamPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarParamPowerOperator self) -> double

        Parameters
        ----------
        self: VarParamPowerOperator *

        """
        return _expression.VarParamPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarParamPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarParamPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarParamPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarParamPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarParamPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarParamPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarParamPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarParamPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarParamPowerOperator_node1_get, _expression.VarParamPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarParamPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarParamPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarParamPowerOperator_node2_get, _expression.VarParamPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarParamPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarParamPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarParamPowerOperator
    __del__ = lambda self: None
VarParamPowerOperator_swigregister = _expression.VarParamPowerOperator_swigregister
VarParamPowerOperator_swigregister(VarParamPowerOperator)

class VarOperatorPowerOperator(Node):
    """Proxy of C++ VarOperatorPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarOperatorPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarOperatorPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(VarOperatorPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> VarOperatorPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_VarOperatorPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(VarOperatorPowerOperator self) -> double

        Parameters
        ----------
        self: VarOperatorPowerOperator *

        """
        return _expression.VarOperatorPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(VarOperatorPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.VarOperatorPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(VarOperatorPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.VarOperatorPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(VarOperatorPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.VarOperatorPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.VarOperatorPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.VarOperatorPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.VarOperatorPowerOperator_node1_get, _expression.VarOperatorPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.VarOperatorPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.VarOperatorPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.VarOperatorPowerOperator_node2_get, _expression.VarOperatorPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(VarOperatorPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.VarOperatorPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_VarOperatorPowerOperator
    __del__ = lambda self: None
VarOperatorPowerOperator_swigregister = _expression.VarOperatorPowerOperator_swigregister
VarOperatorPowerOperator_swigregister(VarOperatorPowerOperator)

class ParamVarPowerOperator(Node):
    """Proxy of C++ ParamVarPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamVarPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamVarPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamVarPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamVarPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamVarPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamVarPowerOperator self) -> double

        Parameters
        ----------
        self: ParamVarPowerOperator *

        """
        return _expression.ParamVarPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamVarPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamVarPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamVarPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamVarPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamVarPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamVarPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamVarPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamVarPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamVarPowerOperator_node1_get, _expression.ParamVarPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamVarPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamVarPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamVarPowerOperator_node2_get, _expression.ParamVarPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamVarPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamVarPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamVarPowerOperator
    __del__ = lambda self: None
ParamVarPowerOperator_swigregister = _expression.ParamVarPowerOperator_swigregister
ParamVarPowerOperator_swigregister(ParamVarPowerOperator)

class ParamParamPowerOperator(Node):
    """Proxy of C++ ParamParamPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamParamPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamParamPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamParamPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamParamPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamParamPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamParamPowerOperator self) -> double

        Parameters
        ----------
        self: ParamParamPowerOperator *

        """
        return _expression.ParamParamPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamParamPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamParamPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamParamPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamParamPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamParamPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamParamPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamParamPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamParamPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamParamPowerOperator_node1_get, _expression.ParamParamPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamParamPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamParamPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamParamPowerOperator_node2_get, _expression.ParamParamPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamParamPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamParamPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamParamPowerOperator
    __del__ = lambda self: None
ParamParamPowerOperator_swigregister = _expression.ParamParamPowerOperator_swigregister
ParamParamPowerOperator_swigregister(ParamParamPowerOperator)

class ParamOperatorPowerOperator(Node):
    """Proxy of C++ ParamOperatorPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamOperatorPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamOperatorPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(ParamOperatorPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> ParamOperatorPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_ParamOperatorPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(ParamOperatorPowerOperator self) -> double

        Parameters
        ----------
        self: ParamOperatorPowerOperator *

        """
        return _expression.ParamOperatorPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(ParamOperatorPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.ParamOperatorPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(ParamOperatorPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.ParamOperatorPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(ParamOperatorPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.ParamOperatorPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.ParamOperatorPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.ParamOperatorPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.ParamOperatorPowerOperator_node1_get, _expression.ParamOperatorPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.ParamOperatorPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.ParamOperatorPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.ParamOperatorPowerOperator_node2_get, _expression.ParamOperatorPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(ParamOperatorPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.ParamOperatorPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_ParamOperatorPowerOperator
    __del__ = lambda self: None
ParamOperatorPowerOperator_swigregister = _expression.ParamOperatorPowerOperator_swigregister
ParamOperatorPowerOperator_swigregister(ParamOperatorPowerOperator)

class OperatorVarPowerOperator(Node):
    """Proxy of C++ OperatorVarPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorVarPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorVarPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorVarPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorVarPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorVarPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorVarPowerOperator self) -> double

        Parameters
        ----------
        self: OperatorVarPowerOperator *

        """
        return _expression.OperatorVarPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorVarPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorVarPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorVarPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorVarPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorVarPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorVarPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorVarPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorVarPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorVarPowerOperator_node1_get, _expression.OperatorVarPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorVarPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorVarPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorVarPowerOperator_node2_get, _expression.OperatorVarPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorVarPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorVarPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorVarPowerOperator
    __del__ = lambda self: None
OperatorVarPowerOperator_swigregister = _expression.OperatorVarPowerOperator_swigregister
OperatorVarPowerOperator_swigregister(OperatorVarPowerOperator)

class OperatorParamPowerOperator(Node):
    """Proxy of C++ OperatorParamPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorParamPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorParamPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorParamPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorParamPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorParamPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorParamPowerOperator self) -> double

        Parameters
        ----------
        self: OperatorParamPowerOperator *

        """
        return _expression.OperatorParamPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorParamPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorParamPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorParamPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorParamPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorParamPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorParamPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorParamPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorParamPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorParamPowerOperator_node1_get, _expression.OperatorParamPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorParamPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorParamPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorParamPowerOperator_node2_get, _expression.OperatorParamPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorParamPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorParamPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorParamPowerOperator
    __del__ = lambda self: None
OperatorParamPowerOperator_swigregister = _expression.OperatorParamPowerOperator_swigregister
OperatorParamPowerOperator_swigregister(OperatorParamPowerOperator)

class OperatorOperatorPowerOperator(Node):
    """Proxy of C++ OperatorOperatorPowerOperator class."""

    __swig_setmethods__ = {}
    for _s in [Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorOperatorPowerOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorOperatorPowerOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n1, n2):
        """
        __init__(OperatorOperatorPowerOperator self, std::shared_ptr< Node > n1, std::shared_ptr< Node > n2) -> OperatorOperatorPowerOperator

        Parameters
        ----------
        n1: std::shared_ptr< Node >
        n2: std::shared_ptr< Node >

        """
        this = _expression.new_OperatorOperatorPowerOperator(n1, n2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def evaluate(self):
        """
        evaluate(OperatorOperatorPowerOperator self) -> double

        Parameters
        ----------
        self: OperatorOperatorPowerOperator *

        """
        return _expression.OperatorOperatorPowerOperator_evaluate(self)


    def ad(self, arg2, new_eval=True):
        """
        ad(OperatorOperatorPowerOperator self, Var arg2, bool new_eval=True) -> double

        Parameters
        ----------
        arg2: Var &
        new_eval: bool

        """
        return _expression.OperatorOperatorPowerOperator_ad(self, arg2, new_eval)


    def ad2(self, arg2, arg3, arg4):
        """
        ad2(OperatorOperatorPowerOperator self, Var arg2, Var arg3, bool arg4) -> double

        Parameters
        ----------
        arg2: Var &
        arg3: Var &
        arg4: bool

        """
        return _expression.OperatorOperatorPowerOperator_ad2(self, arg2, arg3, arg4)


    def set_name(self, arg2):
        """
        set_name(OperatorOperatorPowerOperator self, std::map< std::shared_ptr< Node >,std::string > & arg2) -> std::string

        Parameters
        ----------
        arg2: std::map< std::shared_ptr< Node >,std::string > &

        """
        return _expression.OperatorOperatorPowerOperator_set_name(self, arg2)

    __swig_setmethods__["node1"] = _expression.OperatorOperatorPowerOperator_node1_set
    __swig_getmethods__["node1"] = _expression.OperatorOperatorPowerOperator_node1_get
    if _newclass:
        node1 = _swig_property(_expression.OperatorOperatorPowerOperator_node1_get, _expression.OperatorOperatorPowerOperator_node1_set)
    __swig_setmethods__["node2"] = _expression.OperatorOperatorPowerOperator_node2_set
    __swig_getmethods__["node2"] = _expression.OperatorOperatorPowerOperator_node2_get
    if _newclass:
        node2 = _swig_property(_expression.OperatorOperatorPowerOperator_node2_get, _expression.OperatorOperatorPowerOperator_node2_set)

    def has_ad2(self, arg2, arg3):
        """
        has_ad2(OperatorOperatorPowerOperator self, Var arg2, Var arg3) -> bool

        Parameters
        ----------
        arg2: Var &
        arg3: Var &

        """
        return _expression.OperatorOperatorPowerOperator_has_ad2(self, arg2, arg3)

    __swig_destroy__ = _expression.delete_OperatorOperatorPowerOperator
    __del__ = lambda self: None
OperatorOperatorPowerOperator_swigregister = _expression.OperatorOperatorPowerOperator_swigregister
OperatorOperatorPowerOperator_swigregister(OperatorOperatorPowerOperator)

# This file is compatible with both classic and new-style classes.


