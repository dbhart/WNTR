# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_wntr_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_wntr_model')
    _wntr_model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wntr_model', [dirname(__file__)])
        except ImportError:
            import _wntr_model
            return _wntr_model
        try:
            _mod = imp.load_module('_wntr_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _wntr_model = swig_import_helper()
    del swig_import_helper
else:
    import _wntr_model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import collections
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _wntr_model.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _wntr_model.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _wntr_model.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _wntr_model.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _wntr_model.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _wntr_model.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _wntr_model.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _wntr_model.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _wntr_model.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _wntr_model.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _wntr_model.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _wntr_model.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _wntr_model.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _wntr_model.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _wntr_model.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _wntr_model.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _wntr_model.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _wntr_model.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class double_vector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(double_vector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _wntr_model.double_vector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(double_vector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(double_vector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector___bool__(self)


    def __len__(self):
        """
        __len__(double_vector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> double_vector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _wntr_model.double_vector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, double_vector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _wntr_model.double_vector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _wntr_model.double_vector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(double_vector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(double_vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _wntr_model.double_vector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(double_vector self, PySliceObject * slice) -> double_vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(double_vector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _wntr_model.double_vector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(double_vector self, PySliceObject * slice, double_vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(double_vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(double_vector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _wntr_model.double_vector___setitem__(self, *args)


    def pop(self):
        """
        pop(double_vector self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _wntr_model.double_vector_pop(self)


    def append(self, x):
        """
        append(double_vector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _wntr_model.double_vector_append(self, x)


    def empty(self):
        """
        empty(double_vector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector_empty(self)


    def size(self):
        """
        size(double_vector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector_size(self)


    def swap(self, v):
        """
        swap(double_vector self, double_vector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _wntr_model.double_vector_swap(self, v)


    def begin(self):
        """
        begin(double_vector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _wntr_model.double_vector_begin(self)


    def end(self):
        """
        end(double_vector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _wntr_model.double_vector_end(self)


    def rbegin(self):
        """
        rbegin(double_vector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _wntr_model.double_vector_rbegin(self)


    def rend(self):
        """
        rend(double_vector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _wntr_model.double_vector_rend(self)


    def clear(self):
        """
        clear(double_vector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _wntr_model.double_vector_clear(self)


    def get_allocator(self):
        """
        get_allocator(double_vector self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(double_vector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _wntr_model.double_vector_pop_back(self)


    def erase(self, *args):
        """
        erase(double_vector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(double_vector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _wntr_model.double_vector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> double_vector
        __init__(std::vector<(double)> self, double_vector arg2) -> double_vector

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> double_vector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> double_vector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        this = _wntr_model.new_double_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(double_vector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _wntr_model.double_vector_push_back(self, x)


    def front(self):
        """
        front(double_vector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector_front(self)


    def back(self):
        """
        back(double_vector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector_back(self)


    def assign(self, n, x):
        """
        assign(double_vector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _wntr_model.double_vector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(double_vector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(double_vector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _wntr_model.double_vector_resize(self, *args)


    def insert(self, *args):
        """
        insert(double_vector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(double_vector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _wntr_model.double_vector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(double_vector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _wntr_model.double_vector_reserve(self, n)


    def capacity(self):
        """
        capacity(double_vector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _wntr_model.double_vector_capacity(self)

    __swig_destroy__ = _wntr_model.delete_double_vector
    __del__ = lambda self: None
double_vector_swigregister = _wntr_model.double_vector_swigregister
double_vector_swigregister(double_vector)

class constraint_list(_object):
    """Proxy of C++ std::list<(std::shared_ptr<(ConstraintBase)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, constraint_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, constraint_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(constraint_list self) -> SwigPyIterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(constraint_list self) -> bool

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > const *

        """
        return _wntr_model.constraint_list___nonzero__(self)


    def __bool__(self):
        """
        __bool__(constraint_list self) -> bool

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > const *

        """
        return _wntr_model.constraint_list___bool__(self)


    def __len__(self):
        """
        __len__(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::size_type

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > const *

        """
        return _wntr_model.constraint_list___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::difference_type i, std::list< std::shared_ptr< ConstraintBase > >::difference_type j) -> constraint_list

        Parameters
        ----------
        i: std::list< std::shared_ptr< ConstraintBase > >::difference_type
        j: std::list< std::shared_ptr< ConstraintBase > >::difference_type

        """
        return _wntr_model.constraint_list___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::difference_type i, std::list< std::shared_ptr< ConstraintBase > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< ConstraintBase > >::difference_type
        j: std::list< std::shared_ptr< ConstraintBase > >::difference_type

        __setslice__(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::difference_type i, std::list< std::shared_ptr< ConstraintBase > >::difference_type j, constraint_list v)

        Parameters
        ----------
        i: std::list< std::shared_ptr< ConstraintBase > >::difference_type
        j: std::list< std::shared_ptr< ConstraintBase > >::difference_type
        v: std::list< std::shared_ptr< ConstraintBase >,std::allocator< std::shared_ptr< ConstraintBase > > > const &

        """
        return _wntr_model.constraint_list___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::difference_type i, std::list< std::shared_ptr< ConstraintBase > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< ConstraintBase > >::difference_type
        j: std::list< std::shared_ptr< ConstraintBase > >::difference_type

        """
        return _wntr_model.constraint_list___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::shared_ptr< ConstraintBase > >::difference_type

        __delitem__(constraint_list self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _wntr_model.constraint_list___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(constraint_list self, PySliceObject * slice) -> constraint_list

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::difference_type i) -> std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        Parameters
        ----------
        i: std::list< std::shared_ptr< ConstraintBase > >::difference_type

        """
        return _wntr_model.constraint_list___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(constraint_list self, PySliceObject * slice, constraint_list v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::shared_ptr< ConstraintBase >,std::allocator< std::shared_ptr< ConstraintBase > > > const &

        __setitem__(constraint_list self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::difference_type i, std::list< std::shared_ptr< ConstraintBase > >::value_type const & x)

        Parameters
        ----------
        i: std::list< std::shared_ptr< ConstraintBase > >::difference_type
        x: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        """
        return _wntr_model.constraint_list___setitem__(self, *args)


    def pop(self):
        """
        pop(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::value_type

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_pop(self)


    def append(self, x):
        """
        append(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        """
        return _wntr_model.constraint_list_append(self, x)


    def empty(self):
        """
        empty(constraint_list self) -> bool

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > const *

        """
        return _wntr_model.constraint_list_empty(self)


    def size(self):
        """
        size(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::size_type

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > const *

        """
        return _wntr_model.constraint_list_size(self)


    def swap(self, v):
        """
        swap(constraint_list self, constraint_list v)

        Parameters
        ----------
        v: std::list< std::shared_ptr< ConstraintBase > > &

        """
        return _wntr_model.constraint_list_swap(self, v)


    def begin(self):
        """
        begin(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::iterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_begin(self)


    def end(self):
        """
        end(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::iterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_end(self)


    def rbegin(self):
        """
        rbegin(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::reverse_iterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_rbegin(self)


    def rend(self):
        """
        rend(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::reverse_iterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_rend(self)


    def clear(self):
        """
        clear(constraint_list self)

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_clear(self)


    def get_allocator(self):
        """
        get_allocator(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::allocator_type

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > const *

        """
        return _wntr_model.constraint_list_get_allocator(self)


    def pop_back(self):
        """
        pop_back(constraint_list self)

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_pop_back(self)


    def erase(self, *args):
        """
        erase(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::iterator pos) -> std::list< std::shared_ptr< ConstraintBase > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< ConstraintBase > >::iterator

        erase(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::iterator first, std::list< std::shared_ptr< ConstraintBase > >::iterator last) -> std::list< std::shared_ptr< ConstraintBase > >::iterator

        Parameters
        ----------
        first: std::list< std::shared_ptr< ConstraintBase > >::iterator
        last: std::list< std::shared_ptr< ConstraintBase > >::iterator

        """
        return _wntr_model.constraint_list_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(std::shared_ptr<(ConstraintBase)>)> self) -> constraint_list
        __init__(std::list<(std::shared_ptr<(ConstraintBase)>)> self, constraint_list arg2) -> constraint_list

        Parameters
        ----------
        arg2: std::list< std::shared_ptr< ConstraintBase > > const &

        __init__(std::list<(std::shared_ptr<(ConstraintBase)>)> self, std::list< std::shared_ptr< ConstraintBase > >::size_type size) -> constraint_list

        Parameters
        ----------
        size: std::list< std::shared_ptr< ConstraintBase > >::size_type

        __init__(std::list<(std::shared_ptr<(ConstraintBase)>)> self, std::list< std::shared_ptr< ConstraintBase > >::size_type size, std::list< std::shared_ptr< ConstraintBase > >::value_type const & value) -> constraint_list

        Parameters
        ----------
        size: std::list< std::shared_ptr< ConstraintBase > >::size_type
        value: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        """
        this = _wntr_model.new_constraint_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        """
        return _wntr_model.constraint_list_push_back(self, x)


    def front(self):
        """
        front(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > const *

        """
        return _wntr_model.constraint_list_front(self)


    def back(self):
        """
        back(constraint_list self) -> std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > const *

        """
        return _wntr_model.constraint_list_back(self)


    def assign(self, n, x):
        """
        assign(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::size_type n, std::list< std::shared_ptr< ConstraintBase > >::value_type const & x)

        Parameters
        ----------
        n: std::list< std::shared_ptr< ConstraintBase > >::size_type
        x: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        """
        return _wntr_model.constraint_list_assign(self, n, x)


    def resize(self, *args):
        """
        resize(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< ConstraintBase > >::size_type

        resize(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::size_type new_size, std::list< std::shared_ptr< ConstraintBase > >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< ConstraintBase > >::size_type
        x: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        """
        return _wntr_model.constraint_list_resize(self, *args)


    def insert(self, *args):
        """
        insert(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::iterator pos, std::list< std::shared_ptr< ConstraintBase > >::value_type const & x) -> std::list< std::shared_ptr< ConstraintBase > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< ConstraintBase > >::iterator
        x: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        insert(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::iterator pos, std::list< std::shared_ptr< ConstraintBase > >::size_type n, std::list< std::shared_ptr< ConstraintBase > >::value_type const & x)

        Parameters
        ----------
        pos: std::list< std::shared_ptr< ConstraintBase > >::iterator
        n: std::list< std::shared_ptr< ConstraintBase > >::size_type
        x: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        """
        return _wntr_model.constraint_list_insert(self, *args)


    def pop_front(self):
        """
        pop_front(constraint_list self)

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_pop_front(self)


    def push_front(self, x):
        """
        push_front(constraint_list self, std::list< std::shared_ptr< ConstraintBase > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< ConstraintBase > >::value_type const &

        """
        return _wntr_model.constraint_list_push_front(self, x)


    def reverse(self):
        """
        reverse(constraint_list self)

        Parameters
        ----------
        self: std::list< std::shared_ptr< ConstraintBase > > *

        """
        return _wntr_model.constraint_list_reverse(self)

    __swig_destroy__ = _wntr_model.delete_constraint_list
    __del__ = lambda self: None
constraint_list_swigregister = _wntr_model.constraint_list_swigregister
constraint_list_swigregister(constraint_list)

class var_list(_object):
    """Proxy of C++ std::list<(std::shared_ptr<(Var)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, var_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, var_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(var_list self) -> SwigPyIterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(var_list self) -> bool

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_list___nonzero__(self)


    def __bool__(self):
        """
        __bool__(var_list self) -> bool

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_list___bool__(self)


    def __len__(self):
        """
        __len__(var_list self) -> std::list< std::shared_ptr< Var > >::size_type

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_list___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(var_list self, std::list< std::shared_ptr< Var > >::difference_type i, std::list< std::shared_ptr< Var > >::difference_type j) -> var_list

        Parameters
        ----------
        i: std::list< std::shared_ptr< Var > >::difference_type
        j: std::list< std::shared_ptr< Var > >::difference_type

        """
        return _wntr_model.var_list___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(var_list self, std::list< std::shared_ptr< Var > >::difference_type i, std::list< std::shared_ptr< Var > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< Var > >::difference_type
        j: std::list< std::shared_ptr< Var > >::difference_type

        __setslice__(var_list self, std::list< std::shared_ptr< Var > >::difference_type i, std::list< std::shared_ptr< Var > >::difference_type j, var_list v)

        Parameters
        ----------
        i: std::list< std::shared_ptr< Var > >::difference_type
        j: std::list< std::shared_ptr< Var > >::difference_type
        v: std::list< std::shared_ptr< Var >,std::allocator< std::shared_ptr< Var > > > const &

        """
        return _wntr_model.var_list___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(var_list self, std::list< std::shared_ptr< Var > >::difference_type i, std::list< std::shared_ptr< Var > >::difference_type j)

        Parameters
        ----------
        i: std::list< std::shared_ptr< Var > >::difference_type
        j: std::list< std::shared_ptr< Var > >::difference_type

        """
        return _wntr_model.var_list___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(var_list self, std::list< std::shared_ptr< Var > >::difference_type i)

        Parameters
        ----------
        i: std::list< std::shared_ptr< Var > >::difference_type

        __delitem__(var_list self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _wntr_model.var_list___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(var_list self, PySliceObject * slice) -> var_list

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(var_list self, std::list< std::shared_ptr< Var > >::difference_type i) -> std::list< std::shared_ptr< Var > >::value_type const &

        Parameters
        ----------
        i: std::list< std::shared_ptr< Var > >::difference_type

        """
        return _wntr_model.var_list___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(var_list self, PySliceObject * slice, var_list v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< std::shared_ptr< Var >,std::allocator< std::shared_ptr< Var > > > const &

        __setitem__(var_list self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(var_list self, std::list< std::shared_ptr< Var > >::difference_type i, std::list< std::shared_ptr< Var > >::value_type const & x)

        Parameters
        ----------
        i: std::list< std::shared_ptr< Var > >::difference_type
        x: std::list< std::shared_ptr< Var > >::value_type const &

        """
        return _wntr_model.var_list___setitem__(self, *args)


    def pop(self):
        """
        pop(var_list self) -> std::list< std::shared_ptr< Var > >::value_type

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_pop(self)


    def append(self, x):
        """
        append(var_list self, std::list< std::shared_ptr< Var > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< Var > >::value_type const &

        """
        return _wntr_model.var_list_append(self, x)


    def empty(self):
        """
        empty(var_list self) -> bool

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_list_empty(self)


    def size(self):
        """
        size(var_list self) -> std::list< std::shared_ptr< Var > >::size_type

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_list_size(self)


    def swap(self, v):
        """
        swap(var_list self, var_list v)

        Parameters
        ----------
        v: std::list< std::shared_ptr< Var > > &

        """
        return _wntr_model.var_list_swap(self, v)


    def begin(self):
        """
        begin(var_list self) -> std::list< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_begin(self)


    def end(self):
        """
        end(var_list self) -> std::list< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_end(self)


    def rbegin(self):
        """
        rbegin(var_list self) -> std::list< std::shared_ptr< Var > >::reverse_iterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_rbegin(self)


    def rend(self):
        """
        rend(var_list self) -> std::list< std::shared_ptr< Var > >::reverse_iterator

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_rend(self)


    def clear(self):
        """
        clear(var_list self)

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_clear(self)


    def get_allocator(self):
        """
        get_allocator(var_list self) -> std::list< std::shared_ptr< Var > >::allocator_type

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_list_get_allocator(self)


    def pop_back(self):
        """
        pop_back(var_list self)

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_pop_back(self)


    def erase(self, *args):
        """
        erase(var_list self, std::list< std::shared_ptr< Var > >::iterator pos) -> std::list< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< Var > >::iterator

        erase(var_list self, std::list< std::shared_ptr< Var > >::iterator first, std::list< std::shared_ptr< Var > >::iterator last) -> std::list< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        first: std::list< std::shared_ptr< Var > >::iterator
        last: std::list< std::shared_ptr< Var > >::iterator

        """
        return _wntr_model.var_list_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(std::shared_ptr<(Var)>)> self) -> var_list
        __init__(std::list<(std::shared_ptr<(Var)>)> self, var_list arg2) -> var_list

        Parameters
        ----------
        arg2: std::list< std::shared_ptr< Var > > const &

        __init__(std::list<(std::shared_ptr<(Var)>)> self, std::list< std::shared_ptr< Var > >::size_type size) -> var_list

        Parameters
        ----------
        size: std::list< std::shared_ptr< Var > >::size_type

        __init__(std::list<(std::shared_ptr<(Var)>)> self, std::list< std::shared_ptr< Var > >::size_type size, std::list< std::shared_ptr< Var > >::value_type const & value) -> var_list

        Parameters
        ----------
        size: std::list< std::shared_ptr< Var > >::size_type
        value: std::list< std::shared_ptr< Var > >::value_type const &

        """
        this = _wntr_model.new_var_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(var_list self, std::list< std::shared_ptr< Var > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< Var > >::value_type const &

        """
        return _wntr_model.var_list_push_back(self, x)


    def front(self):
        """
        front(var_list self) -> std::list< std::shared_ptr< Var > >::value_type const &

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_list_front(self)


    def back(self):
        """
        back(var_list self) -> std::list< std::shared_ptr< Var > >::value_type const &

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_list_back(self)


    def assign(self, n, x):
        """
        assign(var_list self, std::list< std::shared_ptr< Var > >::size_type n, std::list< std::shared_ptr< Var > >::value_type const & x)

        Parameters
        ----------
        n: std::list< std::shared_ptr< Var > >::size_type
        x: std::list< std::shared_ptr< Var > >::value_type const &

        """
        return _wntr_model.var_list_assign(self, n, x)


    def resize(self, *args):
        """
        resize(var_list self, std::list< std::shared_ptr< Var > >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< Var > >::size_type

        resize(var_list self, std::list< std::shared_ptr< Var > >::size_type new_size, std::list< std::shared_ptr< Var > >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< std::shared_ptr< Var > >::size_type
        x: std::list< std::shared_ptr< Var > >::value_type const &

        """
        return _wntr_model.var_list_resize(self, *args)


    def insert(self, *args):
        """
        insert(var_list self, std::list< std::shared_ptr< Var > >::iterator pos, std::list< std::shared_ptr< Var > >::value_type const & x) -> std::list< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        pos: std::list< std::shared_ptr< Var > >::iterator
        x: std::list< std::shared_ptr< Var > >::value_type const &

        insert(var_list self, std::list< std::shared_ptr< Var > >::iterator pos, std::list< std::shared_ptr< Var > >::size_type n, std::list< std::shared_ptr< Var > >::value_type const & x)

        Parameters
        ----------
        pos: std::list< std::shared_ptr< Var > >::iterator
        n: std::list< std::shared_ptr< Var > >::size_type
        x: std::list< std::shared_ptr< Var > >::value_type const &

        """
        return _wntr_model.var_list_insert(self, *args)


    def pop_front(self):
        """
        pop_front(var_list self)

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_pop_front(self)


    def push_front(self, x):
        """
        push_front(var_list self, std::list< std::shared_ptr< Var > >::value_type const & x)

        Parameters
        ----------
        x: std::list< std::shared_ptr< Var > >::value_type const &

        """
        return _wntr_model.var_list_push_front(self, x)


    def reverse(self):
        """
        reverse(var_list self)

        Parameters
        ----------
        self: std::list< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_list_reverse(self)

    __swig_destroy__ = _wntr_model.delete_var_list
    __del__ = lambda self: None
var_list_swigregister = _wntr_model.var_list_swigregister
var_list_swigregister(var_list)

class var_set(_object):
    """Proxy of C++ std::set<(std::shared_ptr<(Var)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, var_set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, var_set, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(var_set self) -> SwigPyIterator

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_set_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(var_set self) -> bool

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_set___nonzero__(self)


    def __bool__(self):
        """
        __bool__(var_set self) -> bool

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_set___bool__(self)


    def __len__(self):
        """
        __len__(var_set self) -> std::set< std::shared_ptr< Var > >::size_type

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_set___len__(self)


    def append(self, x):
        """
        append(var_set self, std::set< std::shared_ptr< Var > >::value_type x)

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::value_type

        """
        return _wntr_model.var_set_append(self, x)


    def __contains__(self, x):
        """
        __contains__(var_set self, std::set< std::shared_ptr< Var > >::value_type x) -> bool

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::value_type

        """
        return _wntr_model.var_set___contains__(self, x)


    def __getitem__(self, i):
        """
        __getitem__(var_set self, std::set< std::shared_ptr< Var > >::difference_type i) -> std::set< std::shared_ptr< Var > >::value_type

        Parameters
        ----------
        i: std::set< std::shared_ptr< Var > >::difference_type

        """
        return _wntr_model.var_set___getitem__(self, i)


    def add(self, x):
        """
        add(var_set self, std::set< std::shared_ptr< Var > >::value_type x)

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::value_type

        """
        return _wntr_model.var_set_add(self, x)


    def discard(self, x):
        """
        discard(var_set self, std::set< std::shared_ptr< Var > >::value_type x)

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::value_type

        """
        return _wntr_model.var_set_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(std::shared_ptr<(Var)>)> self, std::less< std::shared_ptr< Var > > const & arg2) -> var_set

        Parameters
        ----------
        arg2: std::less< std::shared_ptr< Var > > const &

        __init__(std::set<(std::shared_ptr<(Var)>)> self) -> var_set
        __init__(std::set<(std::shared_ptr<(Var)>)> self, var_set arg2) -> var_set

        Parameters
        ----------
        arg2: std::set< std::shared_ptr< Var > > const &

        """
        this = _wntr_model.new_var_set(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(var_set self) -> bool

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_set_empty(self)


    def size(self):
        """
        size(var_set self) -> std::set< std::shared_ptr< Var > >::size_type

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > const *

        """
        return _wntr_model.var_set_size(self)


    def clear(self):
        """
        clear(var_set self)

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_set_clear(self)


    def swap(self, v):
        """
        swap(var_set self, var_set v)

        Parameters
        ----------
        v: std::set< std::shared_ptr< Var > > &

        """
        return _wntr_model.var_set_swap(self, v)


    def count(self, x):
        """
        count(var_set self, std::set< std::shared_ptr< Var > >::key_type const & x) -> std::set< std::shared_ptr< Var > >::size_type

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::key_type const &

        """
        return _wntr_model.var_set_count(self, x)


    def begin(self):
        """
        begin(var_set self) -> std::set< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_set_begin(self)


    def end(self):
        """
        end(var_set self) -> std::set< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_set_end(self)


    def rbegin(self):
        """
        rbegin(var_set self) -> std::set< std::shared_ptr< Var > >::reverse_iterator

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_set_rbegin(self)


    def rend(self):
        """
        rend(var_set self) -> std::set< std::shared_ptr< Var > >::reverse_iterator

        Parameters
        ----------
        self: std::set< std::shared_ptr< Var > > *

        """
        return _wntr_model.var_set_rend(self)


    def erase(self, *args):
        """
        erase(var_set self, std::set< std::shared_ptr< Var > >::key_type const & x) -> std::set< std::shared_ptr< Var > >::size_type

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::key_type const &

        erase(var_set self, std::set< std::shared_ptr< Var > >::iterator pos)

        Parameters
        ----------
        pos: std::set< std::shared_ptr< Var > >::iterator

        erase(var_set self, std::set< std::shared_ptr< Var > >::iterator first, std::set< std::shared_ptr< Var > >::iterator last)

        Parameters
        ----------
        first: std::set< std::shared_ptr< Var > >::iterator
        last: std::set< std::shared_ptr< Var > >::iterator

        """
        return _wntr_model.var_set_erase(self, *args)


    def find(self, x):
        """
        find(var_set self, std::set< std::shared_ptr< Var > >::key_type const & x) -> std::set< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::key_type const &

        """
        return _wntr_model.var_set_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(var_set self, std::set< std::shared_ptr< Var > >::key_type const & x) -> std::set< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::key_type const &

        """
        return _wntr_model.var_set_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(var_set self, std::set< std::shared_ptr< Var > >::key_type const & x) -> std::set< std::shared_ptr< Var > >::iterator

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::key_type const &

        """
        return _wntr_model.var_set_upper_bound(self, x)


    def equal_range(self, x):
        """
        equal_range(var_set self, std::set< std::shared_ptr< Var > >::key_type const & x) -> std::pair< std::set< std::shared_ptr< Var > >::iterator,std::set< std::shared_ptr< Var > >::iterator >

        Parameters
        ----------
        x: std::set< std::shared_ptr< Var > >::key_type const &

        """
        return _wntr_model.var_set_equal_range(self, x)


    def insert(self, __x):
        """
        insert(var_set self, std::set< std::shared_ptr< Var > >::value_type const & __x) -> std::pair< std::set< std::shared_ptr< Var > >::iterator,bool >

        Parameters
        ----------
        __x: std::set< std::shared_ptr< Var > >::value_type const &

        """
        return _wntr_model.var_set_insert(self, __x)

    __swig_destroy__ = _wntr_model.delete_var_set
    __del__ = lambda self: None
var_set_swigregister = _wntr_model.var_set_swigregister
var_set_swigregister(var_set)

class int_list(_object):
    """Proxy of C++ std::list<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(int_list self) -> SwigPyIterator

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(int_list self) -> bool

        Parameters
        ----------
        self: std::list< int > const *

        """
        return _wntr_model.int_list___nonzero__(self)


    def __bool__(self):
        """
        __bool__(int_list self) -> bool

        Parameters
        ----------
        self: std::list< int > const *

        """
        return _wntr_model.int_list___bool__(self)


    def __len__(self):
        """
        __len__(int_list self) -> std::list< int >::size_type

        Parameters
        ----------
        self: std::list< int > const *

        """
        return _wntr_model.int_list___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(int_list self, std::list< int >::difference_type i, std::list< int >::difference_type j) -> int_list

        Parameters
        ----------
        i: std::list< int >::difference_type
        j: std::list< int >::difference_type

        """
        return _wntr_model.int_list___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(int_list self, std::list< int >::difference_type i, std::list< int >::difference_type j)

        Parameters
        ----------
        i: std::list< int >::difference_type
        j: std::list< int >::difference_type

        __setslice__(int_list self, std::list< int >::difference_type i, std::list< int >::difference_type j, int_list v)

        Parameters
        ----------
        i: std::list< int >::difference_type
        j: std::list< int >::difference_type
        v: std::list< int,std::allocator< int > > const &

        """
        return _wntr_model.int_list___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(int_list self, std::list< int >::difference_type i, std::list< int >::difference_type j)

        Parameters
        ----------
        i: std::list< int >::difference_type
        j: std::list< int >::difference_type

        """
        return _wntr_model.int_list___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(int_list self, std::list< int >::difference_type i)

        Parameters
        ----------
        i: std::list< int >::difference_type

        __delitem__(int_list self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _wntr_model.int_list___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(int_list self, PySliceObject * slice) -> int_list

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(int_list self, std::list< int >::difference_type i) -> std::list< int >::value_type const &

        Parameters
        ----------
        i: std::list< int >::difference_type

        """
        return _wntr_model.int_list___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(int_list self, PySliceObject * slice, int_list v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::list< int,std::allocator< int > > const &

        __setitem__(int_list self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(int_list self, std::list< int >::difference_type i, std::list< int >::value_type const & x)

        Parameters
        ----------
        i: std::list< int >::difference_type
        x: std::list< int >::value_type const &

        """
        return _wntr_model.int_list___setitem__(self, *args)


    def pop(self):
        """
        pop(int_list self) -> std::list< int >::value_type

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_pop(self)


    def append(self, x):
        """
        append(int_list self, std::list< int >::value_type const & x)

        Parameters
        ----------
        x: std::list< int >::value_type const &

        """
        return _wntr_model.int_list_append(self, x)


    def empty(self):
        """
        empty(int_list self) -> bool

        Parameters
        ----------
        self: std::list< int > const *

        """
        return _wntr_model.int_list_empty(self)


    def size(self):
        """
        size(int_list self) -> std::list< int >::size_type

        Parameters
        ----------
        self: std::list< int > const *

        """
        return _wntr_model.int_list_size(self)


    def swap(self, v):
        """
        swap(int_list self, int_list v)

        Parameters
        ----------
        v: std::list< int > &

        """
        return _wntr_model.int_list_swap(self, v)


    def begin(self):
        """
        begin(int_list self) -> std::list< int >::iterator

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_begin(self)


    def end(self):
        """
        end(int_list self) -> std::list< int >::iterator

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_end(self)


    def rbegin(self):
        """
        rbegin(int_list self) -> std::list< int >::reverse_iterator

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_rbegin(self)


    def rend(self):
        """
        rend(int_list self) -> std::list< int >::reverse_iterator

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_rend(self)


    def clear(self):
        """
        clear(int_list self)

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_clear(self)


    def get_allocator(self):
        """
        get_allocator(int_list self) -> std::list< int >::allocator_type

        Parameters
        ----------
        self: std::list< int > const *

        """
        return _wntr_model.int_list_get_allocator(self)


    def pop_back(self):
        """
        pop_back(int_list self)

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_pop_back(self)


    def erase(self, *args):
        """
        erase(int_list self, std::list< int >::iterator pos) -> std::list< int >::iterator

        Parameters
        ----------
        pos: std::list< int >::iterator

        erase(int_list self, std::list< int >::iterator first, std::list< int >::iterator last) -> std::list< int >::iterator

        Parameters
        ----------
        first: std::list< int >::iterator
        last: std::list< int >::iterator

        """
        return _wntr_model.int_list_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::list<(int)> self) -> int_list
        __init__(std::list<(int)> self, int_list arg2) -> int_list

        Parameters
        ----------
        arg2: std::list< int > const &

        __init__(std::list<(int)> self, std::list< int >::size_type size) -> int_list

        Parameters
        ----------
        size: std::list< int >::size_type

        __init__(std::list<(int)> self, std::list< int >::size_type size, std::list< int >::value_type const & value) -> int_list

        Parameters
        ----------
        size: std::list< int >::size_type
        value: std::list< int >::value_type const &

        """
        this = _wntr_model.new_int_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(int_list self, std::list< int >::value_type const & x)

        Parameters
        ----------
        x: std::list< int >::value_type const &

        """
        return _wntr_model.int_list_push_back(self, x)


    def front(self):
        """
        front(int_list self) -> std::list< int >::value_type const &

        Parameters
        ----------
        self: std::list< int > const *

        """
        return _wntr_model.int_list_front(self)


    def back(self):
        """
        back(int_list self) -> std::list< int >::value_type const &

        Parameters
        ----------
        self: std::list< int > const *

        """
        return _wntr_model.int_list_back(self)


    def assign(self, n, x):
        """
        assign(int_list self, std::list< int >::size_type n, std::list< int >::value_type const & x)

        Parameters
        ----------
        n: std::list< int >::size_type
        x: std::list< int >::value_type const &

        """
        return _wntr_model.int_list_assign(self, n, x)


    def resize(self, *args):
        """
        resize(int_list self, std::list< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::list< int >::size_type

        resize(int_list self, std::list< int >::size_type new_size, std::list< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::list< int >::size_type
        x: std::list< int >::value_type const &

        """
        return _wntr_model.int_list_resize(self, *args)


    def insert(self, *args):
        """
        insert(int_list self, std::list< int >::iterator pos, std::list< int >::value_type const & x) -> std::list< int >::iterator

        Parameters
        ----------
        pos: std::list< int >::iterator
        x: std::list< int >::value_type const &

        insert(int_list self, std::list< int >::iterator pos, std::list< int >::size_type n, std::list< int >::value_type const & x)

        Parameters
        ----------
        pos: std::list< int >::iterator
        n: std::list< int >::size_type
        x: std::list< int >::value_type const &

        """
        return _wntr_model.int_list_insert(self, *args)


    def pop_front(self):
        """
        pop_front(int_list self)

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_pop_front(self)


    def push_front(self, x):
        """
        push_front(int_list self, std::list< int >::value_type const & x)

        Parameters
        ----------
        x: std::list< int >::value_type const &

        """
        return _wntr_model.int_list_push_front(self, x)


    def reverse(self):
        """
        reverse(int_list self)

        Parameters
        ----------
        self: std::list< int > *

        """
        return _wntr_model.int_list_reverse(self)

    __swig_destroy__ = _wntr_model.delete_int_list
    __del__ = lambda self: None
int_list_swigregister = _wntr_model.int_list_swigregister
int_list_swigregister(int_list)

class CSRJacobian(_object):
    """Proxy of C++ CSRJacobian class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSRJacobian, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSRJacobian, name)
    __repr__ = _swig_repr
    __swig_setmethods__["row_nnz"] = _wntr_model.CSRJacobian_row_nnz_set
    __swig_getmethods__["row_nnz"] = _wntr_model.CSRJacobian_row_nnz_get
    if _newclass:
        row_nnz = _swig_property(_wntr_model.CSRJacobian_row_nnz_get, _wntr_model.CSRJacobian_row_nnz_set)
    __swig_setmethods__["col_ndx"] = _wntr_model.CSRJacobian_col_ndx_set
    __swig_getmethods__["col_ndx"] = _wntr_model.CSRJacobian_col_ndx_get
    if _newclass:
        col_ndx = _swig_property(_wntr_model.CSRJacobian_col_ndx_get, _wntr_model.CSRJacobian_col_ndx_set)
    __swig_setmethods__["vars"] = _wntr_model.CSRJacobian_vars_set
    __swig_getmethods__["vars"] = _wntr_model.CSRJacobian_vars_get
    if _newclass:
        vars = _swig_property(_wntr_model.CSRJacobian_vars_get, _wntr_model.CSRJacobian_vars_set)
    __swig_setmethods__["cons"] = _wntr_model.CSRJacobian_cons_set
    __swig_getmethods__["cons"] = _wntr_model.CSRJacobian_cons_get
    if _newclass:
        cons = _swig_property(_wntr_model.CSRJacobian_cons_get, _wntr_model.CSRJacobian_cons_set)

    def add_constraint(self, arg2):
        """
        add_constraint(CSRJacobian self, std::shared_ptr< ConstraintBase > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< ConstraintBase >

        """
        return _wntr_model.CSRJacobian_add_constraint(self, arg2)


    def remove_constraint(self, arg2):
        """
        remove_constraint(CSRJacobian self, std::shared_ptr< ConstraintBase > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< ConstraintBase >

        """
        return _wntr_model.CSRJacobian_remove_constraint(self, arg2)


    def evaluate(self, array_out, new_eval=True):
        """
        evaluate(CSRJacobian self, double * array_out, bool new_eval=True)

        Parameters
        ----------
        array_out: double *
        new_eval: bool

        """
        return _wntr_model.CSRJacobian_evaluate(self, array_out, new_eval)


    def get_row_nnz(self):
        """
        get_row_nnz(CSRJacobian self) -> int_list

        Parameters
        ----------
        self: CSRJacobian *

        """
        return _wntr_model.CSRJacobian_get_row_nnz(self)


    def get_col_ndx(self):
        """
        get_col_ndx(CSRJacobian self) -> int_list

        Parameters
        ----------
        self: CSRJacobian *

        """
        return _wntr_model.CSRJacobian_get_col_ndx(self)


    def __init__(self):
        """__init__(CSRJacobian self) -> CSRJacobian"""
        this = _wntr_model.new_CSRJacobian()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wntr_model.delete_CSRJacobian
    __del__ = lambda self: None
CSRJacobian_swigregister = _wntr_model.CSRJacobian_swigregister
CSRJacobian_swigregister(CSRJacobian)

class WNTRModel(_object):
    """Proxy of C++ WNTRModel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WNTRModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WNTRModel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vars"] = _wntr_model.WNTRModel_vars_set
    __swig_getmethods__["vars"] = _wntr_model.WNTRModel_vars_get
    if _newclass:
        vars = _swig_property(_wntr_model.WNTRModel_vars_get, _wntr_model.WNTRModel_vars_set)
    __swig_setmethods__["cons"] = _wntr_model.WNTRModel_cons_set
    __swig_getmethods__["cons"] = _wntr_model.WNTRModel_cons_get
    if _newclass:
        cons = _swig_property(_wntr_model.WNTRModel_cons_get, _wntr_model.WNTRModel_cons_set)
    __swig_setmethods__["jac"] = _wntr_model.WNTRModel_jac_set
    __swig_getmethods__["jac"] = _wntr_model.WNTRModel_jac_get
    if _newclass:
        jac = _swig_property(_wntr_model.WNTRModel_jac_get, _wntr_model.WNTRModel_jac_set)

    def get_x(self, array_out):
        """
        get_x(WNTRModel self, double * array_out)

        Parameters
        ----------
        array_out: double *

        """
        return _wntr_model.WNTRModel_get_x(self, array_out)


    def load_var_values_from_x(self, array_in):
        """
        load_var_values_from_x(WNTRModel self, double * array_in)

        Parameters
        ----------
        array_in: double *

        """
        return _wntr_model.WNTRModel_load_var_values_from_x(self, array_in)


    def add_constraint(self, arg2):
        """
        add_constraint(WNTRModel self, std::shared_ptr< ConstraintBase > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< ConstraintBase >

        """
        return _wntr_model.WNTRModel_add_constraint(self, arg2)


    def remove_constraint(self, arg2):
        """
        remove_constraint(WNTRModel self, std::shared_ptr< ConstraintBase > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< ConstraintBase >

        """
        return _wntr_model.WNTRModel_remove_constraint(self, arg2)


    def add_var(self, arg2):
        """
        add_var(WNTRModel self, std::shared_ptr< Var > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< Var >

        """
        return _wntr_model.WNTRModel_add_var(self, arg2)


    def remove_var(self, arg2):
        """
        remove_var(WNTRModel self, std::shared_ptr< Var > arg2)

        Parameters
        ----------
        arg2: std::shared_ptr< Var >

        """
        return _wntr_model.WNTRModel_remove_var(self, arg2)


    def evaluate(self, array_out):
        """
        evaluate(WNTRModel self, double * array_out)

        Parameters
        ----------
        array_out: double *

        """
        return _wntr_model.WNTRModel_evaluate(self, array_out)


    def __init__(self):
        """__init__(WNTRModel self) -> WNTRModel"""
        this = _wntr_model.new_WNTRModel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _wntr_model.delete_WNTRModel
    __del__ = lambda self: None
WNTRModel_swigregister = _wntr_model.WNTRModel_swigregister
WNTRModel_swigregister(WNTRModel)


def compare_var_indices(arg1, arg2):
    """
    compare_var_indices(std::shared_ptr< Var > arg1, std::shared_ptr< Var > arg2) -> bool

    Parameters
    ----------
    arg1: std::shared_ptr< Var >
    arg2: std::shared_ptr< Var >

    """
    return _wntr_model.compare_var_indices(arg1, arg2)
# This file is compatible with both classic and new-style classes.


